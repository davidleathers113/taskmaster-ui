[{"filePath":"/Users/davidleathers/taskmaster-ui/src/main/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1678,1681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1678,1681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2180,2183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2180,2183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":193,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":193,"endColumn":51},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":205,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":207,"endColumn":12,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7392,7392],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7392,7392],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8440,8443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8440,8443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":238,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":238,"endColumn":41},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":326,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":326,"endColumn":38,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11568,11568],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[11568,11568],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":345,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":345,"endColumn":34,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12260,12260],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[12260,12260],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":363,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":363,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12834,12834],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[12834,12834],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":387,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":387,"endColumn":46,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[13441,13441],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[13441,13441],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":453,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":453,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[16165,16165],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[16165,16165],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":464,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":464,"endColumn":41,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[16602,16602],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[16602,16602],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":470,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":470,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[16798,16798],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[16798,16798],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":545,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":554,"endColumn":8,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[19871,19871],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[19871,19871],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":572,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20883,20886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20883,20886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":573,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":573,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20932,20935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20932,20935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":592,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":592,"endColumn":51,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[21611,21611],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[21611,21611],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":667,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":690,"endColumn":4,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[23614,23614],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[23614,23614],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { app, BrowserWindow, ipcMain, dialog, shell } from 'electron';\nimport { autoUpdater } from 'electron-updater';\nimport log from 'electron-log';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n/// <reference path=\"./vite-env.d.ts\" />\n\n// ESM compatibility: Replace __dirname with import.meta.url\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// ============================================\n// 🚨 AGGRESSIVE DEBUG LOGGING - 2025 EDITION 🚨\n// ============================================\n\n// Configure electron-log for comprehensive logging\nlog.transports.file.level = 'info';\nlog.transports.console.level = 'info';\nlog.transports.file.maxSize = 5 * 1024 * 1024; // 5MB\n// Use the new API to avoid deprecation warning\nlog.transports.file.archiveLogFn = (oldLogFile) => {\n  // Use process.stdout to avoid infinite recursion since console is overridden below\n  process.stdout.write(`[TASKMASTER] Archived log: ${oldLogFile.toString()}\\n`);\n};\n\n// Override console methods to also log to file\nObject.assign(console, log.functions);\n\nconst DEBUG_MODE = true;\nconst DEBUG_PREFIX = '🔍 [TASKMASTER DEBUG]';\nconst ERROR_PREFIX = '❌ [TASKMASTER ERROR]';\nconst SUCCESS_PREFIX = '✅ [TASKMASTER SUCCESS]';\nconst WARNING_PREFIX = '⚠️  [TASKMASTER WARNING]';\nconst INFO_PREFIX = 'ℹ️  [TASKMASTER INFO]';\n\n// Performance timing\nconst startTime = Date.now();\nconst timingLog = (message: string) => {\n  const elapsed = Date.now() - startTime;\n  console.log(`⏱️  [${elapsed}ms] ${message}`);\n};\n\n// Enhanced logging with stack traces\nconst debugLog = (category: string, message: string, data?: any) => {\n  if (!DEBUG_MODE) return;\n  \n  const timestamp = new Date().toISOString();\n  const stack = new Error().stack?.split('\\n')[2]?.trim() || 'unknown';\n  \n  console.log(`\\n${DEBUG_PREFIX} [${timestamp}]`);\n  console.log(`📁 Category: ${category}`);\n  console.log(`💬 Message: ${message}`);\n  console.log(`📍 Location: ${stack}`);\n  \n  if (data !== undefined) {\n    console.log(`📊 Data:`, data);\n  }\n  console.log('─'.repeat(80));\n};\n\nconst errorLog = (category: string, message: string, error?: any) => {\n  const timestamp = new Date().toISOString();\n  console.error(`\\n${ERROR_PREFIX} [${timestamp}]`);\n  console.error(`📁 Category: ${category}`);\n  console.error(`💥 Error: ${message}`);\n  \n  if (error) {\n    console.error(`🔴 Error Object:`, error);\n    if (error.stack) {\n      console.error(`📚 Stack Trace:\\n${error.stack}`);\n    }\n  }\n  console.error('═'.repeat(80));\n};\n\n// Log initial environment\nconsole.log('\\n' + '='.repeat(80));\nconsole.log('🚀 TASKMASTER ELECTRON APP STARTING - DEBUG MODE ENABLED 🚀');\nconsole.log('='.repeat(80));\n\ndebugLog('ENVIRONMENT', 'Initial Environment Check', {\n  nodeVersion: process.versions.node,\n  electronVersion: process.versions.electron,\n  chromeVersion: process.versions.chrome,\n  v8Version: process.versions.v8,\n  platform: process.platform,\n  arch: process.arch,\n  cwd: process.cwd(),\n  __dirname,\n  __filename,\n  execPath: process.execPath,\n  resourcesPath: process.resourcesPath,\n  isPackaged: app.isPackaged,\n  appPath: app.getAppPath(),\n  userData: app.getPath('userData'),\n  NODE_ENV: process.env.NODE_ENV,\n  ELECTRON_IS_DEV: process.env.ELECTRON_IS_DEV,\n});\n\n// electron-vite handles development/production URLs automatically\n\n// File existence checker\nconst checkFileExists = (filePath: string, description: string): boolean => {\n  try {\n    const exists = fs.existsSync(filePath);\n    const stats = exists ? fs.statSync(filePath) : null;\n    \n    if (exists) {\n      console.log(`${SUCCESS_PREFIX} ${description}: ${filePath}`);\n      console.log(`  📏 Size: ${stats?.size} bytes`);\n      console.log(`  📅 Modified: ${stats?.mtime}`);\n    } else {\n      console.error(`${ERROR_PREFIX} ${description} NOT FOUND: ${filePath}`);\n    }\n    \n    return exists;\n  } catch (error) {\n    errorLog('FILE_CHECK', `Error checking ${description}`, error);\n    return false;\n  }\n};\n\n// Check critical paths at startup\ntimingLog('Checking critical file paths...');\nconst criticalPaths = {\n  mainScript: path.join(__dirname, 'index.js'),\n  preloadDev: path.join(__dirname, '../preload/index.js'),\n  preloadProd: path.join(__dirname, '../preload/index.cjs'),\n  rendererDev: 'http://localhost:5173',\n  rendererProd: path.join(__dirname, '../renderer/index.html'),\n  rendererProdAlt: path.join(__dirname, '../renderer/index.html'),\n};\n\ndebugLog('PATH_CHECK', 'Checking critical paths', criticalPaths);\n\n// Check which files actually exist\ncheckFileExists(criticalPaths.mainScript, 'Main Script');\ncheckFileExists(criticalPaths.preloadDev, 'Preload (Dev Path)');\ncheckFileExists(criticalPaths.preloadProd, 'Preload (Prod Path)');\ncheckFileExists(criticalPaths.rendererProd, 'Renderer HTML (Prod Path)');\ncheckFileExists(criticalPaths.rendererProdAlt, 'Renderer HTML (Alt Path)');\n\n// 2025 Security Best Practices - Electron Forge Fuses Configuration\n// Security fuses are configured in forge.config.js:\n// - RunAsNode: false (prevents Node.js execution in renderer)\n// - EnableCookieEncryption: true (encrypts cookies)\n// - EnableNodeOptionsEnvironmentVariable: false (prevents Node options injection)\n// - EnableNodeCliInspectArguments: false (prevents debug inspection)\n// - EnableEmbeddedAsarIntegrityValidation: true (validates ASAR integrity)\n// - OnlyLoadAppFromAsar: true (only loads app from ASAR package)\n\n// ============================================\n// 🚨 GLOBAL ERROR HANDLERS - CATCH EVERYTHING 🚨\n// ============================================\n\nprocess.on('uncaughtException', (error) => {\n  console.error('\\n' + '💥'.repeat(40));\n  console.error('💥 UNCAUGHT EXCEPTION IN MAIN PROCESS 💥');\n  console.error('💥'.repeat(40));\n  console.error('Error:', error);\n  console.error('Stack:', error.stack);\n  console.error('💥'.repeat(40) + '\\n');\n  \n  // Show error dialog\n  dialog.showErrorBox('Uncaught Exception', \n    `An unexpected error occurred:\\n\\n${error.message}\\n\\nThe application may be unstable.`);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('\\n' + '⚡'.repeat(40));\n  console.error('⚡ UNHANDLED PROMISE REJECTION IN MAIN PROCESS ⚡');\n  console.error('⚡'.repeat(40));\n  console.error('Reason:', reason);\n  console.error('Promise:', promise);\n  console.error('⚡'.repeat(40) + '\\n');\n});\n\n// ============================================\n// 🔥 Hot Reloading Development Utilities - 2025 Best Practices 🔥\n// ============================================\n\n// Enhanced development logging for hot reloading\nif (!app.isPackaged) {\n  console.log('\\n' + '🔥'.repeat(60));\n  console.log('🔥 HOT RELOADING DEVELOPMENT MODE ACTIVE 🔥');\n  console.log('🔥'.repeat(60));\n  \n  // Add keyboard shortcuts for development\n  const addDevelopmentShortcuts = (window: BrowserWindow) => {\n    // Register global shortcuts for development\n    const { globalShortcut } = require('electron');\n    \n    try {\n      // Ctrl+R / Cmd+R: Reload renderer\n      globalShortcut.register('CmdOrCtrl+R', () => {\n        debugLog('DEV_SHORTCUT', 'Manual renderer reload triggered');\n        window.webContents.reload();\n      });\n      \n      // Ctrl+Shift+R / Cmd+Shift+R: Hard reload (clear cache)\n      globalShortcut.register('CmdOrCtrl+Shift+R', () => {\n        debugLog('DEV_SHORTCUT', 'Hard reload triggered (clearing cache)');\n        window.webContents.session.clearCache().then(() => {\n          window.webContents.reload();\n        });\n      });\n      \n      // F5: Alternative reload\n      globalShortcut.register('F5', () => {\n        debugLog('DEV_SHORTCUT', 'F5 reload triggered');\n        window.webContents.reload();\n      });\n      \n      // Ctrl+Shift+I / Cmd+Shift+I: Toggle DevTools\n      globalShortcut.register('CmdOrCtrl+Shift+I', () => {\n        debugLog('DEV_SHORTCUT', 'DevTools toggle triggered');\n        window.webContents.toggleDevTools();\n      });\n      \n      console.log(`${SUCCESS_PREFIX} Development shortcuts registered:`);\n      console.log('  🔄 Ctrl/Cmd+R: Reload renderer');\n      console.log('  🔄 Ctrl/Cmd+Shift+R: Hard reload (clear cache)');\n      console.log('  🔄 F5: Alternative reload');\n      console.log('  🔧 Ctrl/Cmd+Shift+I: Toggle DevTools');\n      \n    } catch (error) {\n      errorLog('DEV_SHORTCUTS', 'Failed to register development shortcuts', error);\n    }\n  };\n  \n  // Export the function to be used in createWindow\n  (global as any).addDevelopmentShortcuts = addDevelopmentShortcuts;\n  \n  // Hot reload monitoring\n  const setupHotReloadMonitoring = () => {\n    const chokidar = require('chokidar');\n    \n    // Watch for main process file changes (electron-vite handles this but add extra logging)\n    const mainWatcher = chokidar.watch([\n      path.join(__dirname, '../**/*.{js,ts,mjs,cjs}'),\n      path.join(__dirname, '../../src/main/**/*.{js,ts}'),\n      path.join(__dirname, '../../src/preload/**/*.{js,ts}')\n    ], {\n      ignored: [\n        '**/node_modules/**',\n        '**/dist/**',\n        '**/out/**',\n        '**/.git/**'\n      ],\n      ignoreInitial: true\n    });\n    \n    mainWatcher.on('change', (filePath: string) => {\n      console.log(`${WARNING_PREFIX} Main/Preload file changed: ${filePath}`);\n      console.log('🔥 electron-vite will handle the restart automatically');\n    });\n    \n    mainWatcher.on('error', (error: Error) => {\n      errorLog('HOT_RELOAD_WATCH', 'File watcher error', error);\n    });\n    \n    // Log renderer changes (handled by Vite HMR)\n    console.log(`${INFO_PREFIX} Hot reload monitoring active:`);\n    console.log('  🔥 Main process: Watched by electron-vite (auto-restart)');\n    console.log('  🔥 Preload scripts: Watched by electron-vite (auto-restart)');\n    console.log('  🔥 Renderer process: Handled by Vite HMR (hot updates)');\n  };\n  \n  // Initialize hot reload monitoring\n  try {\n    setupHotReloadMonitoring();\n  } catch (error) {\n    errorLog('HOT_RELOAD_INIT', 'Failed to initialize hot reload monitoring', error);\n  }\n}\n\n// Log when the app starts\nconsole.log(`\\n${SUCCESS_PREFIX} Main process initialized`);\nconsole.log(`📍 Script location: ${__filename}`);\nconsole.log(`📁 Working directory: ${process.cwd()}`);\ntimingLog('Main process startup complete');\n\n// Note: electron-squirrel-startup removed during migration to electron-vite\n// Squirrel startup handling will be configured in electron-builder if needed\n\n// Security: Disable GPU acceleration if needed for security (uncomment if required)\n// app.disableHardwareAcceleration();\n\n// Security: Enable secure protocols\napp.setAsDefaultProtocolClient('taskmaster');\n\n// Auto-updater configuration for 2025 best practices\nclass AutoUpdaterManager {\n  private static instance: AutoUpdaterManager;\n  private mainWindow: BrowserWindow | null = null;\n\n  private constructor() {\n    this.configureAutoUpdater();\n  }\n\n  public static getInstance(): AutoUpdaterManager {\n    if (!AutoUpdaterManager.instance) {\n      AutoUpdaterManager.instance = new AutoUpdaterManager();\n    }\n    return AutoUpdaterManager.instance;\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n\n  private configureAutoUpdater(): void {\n    // Security: Enable signature verification (macOS and Windows)\n    autoUpdater.autoDownload = false;\n    autoUpdater.autoInstallOnAppQuit = true;\n\n    // Auto-updater event handlers\n    autoUpdater.on('checking-for-update', () => {\n      console.log('Checking for update...');\n    });\n\n    autoUpdater.on('update-available', (info) => {\n      console.log('Update available:', info);\n      this.promptUserForUpdate(info);\n    });\n\n    autoUpdater.on('update-not-available', (info) => {\n      console.log('Update not available:', info);\n    });\n\n    autoUpdater.on('error', (err) => {\n      console.error('Auto-updater error:', err);\n    });\n\n    autoUpdater.on('download-progress', (progressObj) => {\n      const logMessage = `Download speed: ${progressObj.bytesPerSecond} - Downloaded ${progressObj.percent}% (${progressObj.transferred}/${progressObj.total})`;\n      console.log(logMessage);\n      this.mainWindow?.webContents.send('download-progress', progressObj);\n    });\n\n    autoUpdater.on('update-downloaded', (info) => {\n      console.log('Update downloaded:', info);\n      this.promptUserToInstall();\n    });\n  }\n\n  private async promptUserForUpdate(info: { version: string }): Promise<void> {\n    if (!this.mainWindow) return;\n\n    const result = await dialog.showMessageBox(this.mainWindow, {\n      type: 'info',\n      title: 'Update Available',\n      message: 'A new version is available. Would you like to download it now?',\n      detail: `Version ${info.version} is available. The app will restart after the update.`,\n      buttons: ['Download', 'Later'],\n      defaultId: 0,\n      cancelId: 1\n    });\n\n    if (result.response === 0) {\n      autoUpdater.downloadUpdate();\n    }\n  }\n\n  private async promptUserToInstall(): Promise<void> {\n    if (!this.mainWindow) return;\n\n    const result = await dialog.showMessageBox(this.mainWindow, {\n      type: 'info',\n      title: 'Update Ready',\n      message: 'Update downloaded. Restart the application to apply the update.',\n      buttons: ['Restart Now', 'Later'],\n      defaultId: 0,\n      cancelId: 1\n    });\n\n    if (result.response === 0) {\n      autoUpdater.quitAndInstall();\n    }\n  }\n\n  public checkForUpdates(): void {\n    // Only check for updates in production\n    if (app.isPackaged) {\n      autoUpdater.checkForUpdatesAndNotify();\n    }\n  }\n}\n\nconst createWindow = (): void => {\n  timingLog('Starting createWindow()');\n  debugLog('WINDOW_CREATION', 'Creating main browser window...');\n  \n  try {\n    // electron-vite automatically handles preload script paths\n    const preloadPath = path.join(__dirname, '../preload/index.cjs');\n    checkFileExists(preloadPath, 'Preload Script');\n    \n    // Create the browser window with 2025 security best practices\n    const windowConfig = {\n      height: 800,\n      width: 1200,\n      minHeight: 600,\n      minWidth: 800,\n      webPreferences: {\n        // 2025 Security Best Practices - Critical Settings\n        nodeIntegration: false,              // Disable Node.js in renderer process\n        contextIsolation: true,              // Enable context isolation (default since Electron 12)\n        enableRemoteModule: false,           // Disable remote module (deprecated but ensure it's off)\n        allowRunningInsecureContent: false,  // Block mixed content\n        experimentalFeatures: false,         // Disable experimental web features\n        \n        // Security: Preload script for safe API exposure\n        preload: preloadPath,\n        \n        // Security: Sandbox the renderer process\n        sandbox: false, // Set to true for maximum security, false for now to maintain functionality\n        \n        // Security: Disable webSecurity only in development\n        webSecurity: !process.env.ELECTRON_DISABLE_SECURITY_WARNINGS,\n        \n        // Security: Additional protections\n        spellcheck: false,                   // Disable spellcheck to prevent data leakage\n        defaultEncoding: 'UTF-8',\n      },\n      \n      // Window appearance and behavior\n      show: false, // Don't show until ready\n      titleBarStyle: (process.platform === 'darwin' ? 'hiddenInset' : 'default') as 'hiddenInset' | 'default',\n      \n      // Security: Icon configuration - Updated for electron-vite asset structure\n      icon: path.join(__dirname, '../../resources/icon-256.png'),\n    };\n    \n    debugLog('WINDOW_CONFIG', 'Window configuration', windowConfig);\n    \n    const mainWindow = new BrowserWindow(windowConfig);\n    \n    console.log(`${SUCCESS_PREFIX} Main window created successfully`);\n    debugLog('WINDOW_CREATED', 'BrowserWindow instance created', {\n      id: mainWindow.id,\n      webContentsId: mainWindow.webContents.id,\n    });\n\n  // Security: Configure window behavior\n  mainWindow.setMenuBarVisibility(false); // Hide menu bar (can be toggled with Alt)\n  \n  // Security: Handle external navigation attempts\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    // Security: Block all window.open attempts and open in external browser\n    shell.openExternal(url);\n    return { action: 'deny' };\n  });\n\n  // Security: Prevent navigation to external URLs\n  mainWindow.webContents.on('will-navigate', (event, navigationUrl) => {\n    const parsedUrl = new URL(navigationUrl);\n    \n    // Allow navigation within the app (dev server or file protocol)\n    if (!parsedUrl.origin.startsWith('http://localhost') && parsedUrl.origin !== 'file://') {\n      event.preventDefault();\n      shell.openExternal(navigationUrl);\n    }\n  });\n\n  // Security: Handle new window requests (replaced deprecated 'new-window' event)\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    shell.openExternal(url);\n    return { action: 'deny' };\n  });\n\n  // Load the app - electron-vite handles development/production URLs automatically\n  debugLog('URL_LOADING', 'Loading application...');\n  \n  if (!app.isPackaged) {\n    // Development mode: electron-vite provides dev server URL automatically\n    console.log(`${INFO_PREFIX} Loading development server (electron-vite handles URL)`);\n    debugLog('DEV_MODE', 'Loading development URL');\n    \n    // electron-vite dev server runs on standard port 5173\n    const devServerUrl = process.env.VITE_DEV_SERVER_URL || 'http://localhost:5173';\n    mainWindow.loadURL(devServerUrl).then(() => {\n      console.log(`${SUCCESS_PREFIX} Successfully loaded dev server`);\n      timingLog('Dev server loaded');\n    }).catch((err) => {\n      errorLog('DEV_LOAD_ERROR', 'Failed to load dev server', err);\n      dialog.showErrorBox('Development Server Error', \n        `Failed to connect to development server\\n\\nError: ${err.message}\\n\\nMake sure electron-vite dev server is running.`);\n    });\n  } else {\n    // Production mode: electron-vite builds to standard location\n    const indexPath = path.join(__dirname, '../renderer/index.html');\n    \n    console.log(`${INFO_PREFIX} Loading from file system (production mode)`);\n    debugLog('PROD_MODE', 'Loading production file', { \n      indexPath,\n      exists: fs.existsSync(indexPath)\n    });\n    \n    mainWindow.loadFile(indexPath).then(() => {\n      console.log(`${SUCCESS_PREFIX} Successfully loaded production build`);\n      timingLog('Production file loaded');\n    }).catch((err) => {\n      errorLog('PROD_LOAD_ERROR', 'Failed to load production build', err);\n      dialog.showErrorBox('Loading Error', \n        `Failed to load application file\\n\\nError: ${err.message}`);\n    });\n  }\n\n  // Security: Production CSP headers will be set by Vite\n  if (!app.isPackaged) {\n    // Development: Open DevTools\n    mainWindow.webContents.openDevTools();\n    console.log(`${INFO_PREFIX} DevTools opened (development mode)`);\n    \n    // Add console message handler to see renderer logs in main process\n    mainWindow.webContents.on('console-message', (_event, level, message, line, sourceId) => {\n      const logPrefix = `🌐 [RENDERER ${level}]`;\n      console.log(`${logPrefix} ${message} (${sourceId}:${line})`);\n    });\n  }\n\n  // Enhanced error tracking for renderer process\n  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {\n    errorLog('RENDERER_LOAD_FAIL', 'Renderer failed to load', {\n      errorCode,\n      errorDescription,\n      validatedURL,\n      event\n    });\n  });\n\n  mainWindow.webContents.on('render-process-gone', (_event, details) => {\n    errorLog('RENDERER_CRASH', 'Renderer process gone', { details, reason: details.reason, exitCode: details.exitCode });\n  });\n\n  // Log successful page loads\n  mainWindow.webContents.on('did-finish-load', () => {\n    console.log(`${SUCCESS_PREFIX} Renderer finished loading`);\n    timingLog('Renderer fully loaded');\n    \n    // Log some debug info about the loaded page\n    mainWindow.webContents.executeJavaScript(`\n      console.log('🎯 Page loaded successfully');\n      console.log('📍 Location:', window.location.href);\n      console.log('🔌 electronAPI available:', typeof window.electronAPI !== 'undefined');\n      if (typeof window.electronAPI !== 'undefined') {\n        console.log('📋 electronAPI methods:', Object.keys(window.electronAPI));\n      } else {\n        console.error('❌ electronAPI is NOT available in renderer!');\n      }\n    `);\n  });\n\n  mainWindow.webContents.on('did-start-loading', () => {\n    debugLog('RENDERER_LOADING', 'Renderer started loading');\n  });\n\n  mainWindow.webContents.on('dom-ready', () => {\n    debugLog('RENDERER_DOM', 'Renderer DOM ready');\n  });\n\n  // Show window when ready\n  mainWindow.once('ready-to-show', () => {\n    console.log(`${SUCCESS_PREFIX} Window ready to show`);\n    timingLog('Window ready to show');\n    mainWindow.show();\n    \n    // Initialize development shortcuts for hot reloading\n    if (!app.isPackaged && (global as any).addDevelopmentShortcuts) {\n      (global as any).addDevelopmentShortcuts(mainWindow);\n      debugLog('DEV_SHORTCUTS', 'Development shortcuts initialized for hot reloading');\n    }\n    \n    // Initialize auto-updater\n    const autoUpdaterManager = AutoUpdaterManager.getInstance();\n    autoUpdaterManager.setMainWindow(mainWindow);\n    \n    // Check for updates after a delay to ensure app is fully loaded\n    setTimeout(() => {\n      debugLog('AUTO_UPDATE', 'Checking for updates...');\n      autoUpdaterManager.checkForUpdates();\n    }, 3000);\n  });\n\n  // Security: Clear cache on window close in development\n  mainWindow.on('closed', () => {\n    debugLog('WINDOW_EVENT', 'Window closed');\n    if (!app.isPackaged) {\n      mainWindow.webContents.session.clearCache();\n      debugLog('CACHE', 'Cleared session cache (dev mode)');\n    }\n  });\n  \n  } catch (error) {\n    errorLog('WINDOW_CREATION_FATAL', 'Fatal error creating window', error);\n    dialog.showErrorBox('Fatal Error', \n      `Failed to create application window.\\n\\nError: ${error}\\n\\nThe application will now exit.`);\n    app.quit();\n  }\n};\n\n// Security: IPC handlers with input validation\nipcMain.handle('app:get-version', () => {\n  return app.getVersion();\n});\n\nipcMain.handle('app:get-platform', () => {\n  return process.platform;\n});\n\nipcMain.handle('app:get-app-data-path', () => {\n  return app.getPath('userData');\n});\n\n// Security: Sanitize and validate file system operations\nipcMain.handle('fs:get-documents-path', () => {\n  return app.getPath('documents');\n});\n\n// Security: Safe dialog operations\nipcMain.handle('dialog:show-error', async (event, title: string, content: string) => {\n  const window = BrowserWindow.fromWebContents(event.sender);\n  if (!window) return;\n  \n  return await dialog.showErrorBox(title, content);\n});\n\n// App event handlers\napp.on('window-all-closed', () => {\n  debugLog('APP_EVENT', 'All windows closed');\n  // Security: Clear sensitive data on app close\n  if (process.platform !== 'darwin') {\n    debugLog('APP_EVENT', 'Quitting app (non-macOS)');\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  debugLog('APP_EVENT', 'App activated');\n  if (BrowserWindow.getAllWindows().length === 0) {\n    debugLog('APP_EVENT', 'No windows exist, creating new window');\n    createWindow();\n  }\n});\n\n// Log app readiness\napp.on('will-finish-launching', () => {\n  debugLog('APP_EVENT', 'App will finish launching');\n});\n\napp.on('before-quit', (event) => {\n  debugLog('APP_EVENT', 'App before quit', { event });\n});\n\napp.on('will-quit', (event) => {\n  debugLog('APP_EVENT', 'App will quit', { event });\n});\n\napp.on('quit', (event, exitCode) => {\n  debugLog('APP_EVENT', 'App quit', { event, exitCode });\n});\n\n// Security: App startup\napp.whenReady().then(() => {\n  console.log(`${SUCCESS_PREFIX} Electron app is ready!`);\n  timingLog('App ready event fired');\n  debugLog('APP_READY', 'App is ready, creating window...');\n  // Security: Set app security policies\n  // Security: Set app security policies (Windows only)\n  if (process.platform === 'win32') {\n    app.setUserTasks([]); // Clear any user tasks\n  }\n  \n  createWindow();\n  \n  // Security: Handle certificate errors\n  app.on('certificate-error', (event, _webContents, url, _error, _certificate, callback) => {\n    // In production, reject all certificate errors\n    // In development, you might want to allow localhost\n    if (!app.isPackaged && url.startsWith('http://localhost')) {\n      event.preventDefault();\n      callback(true);\n    } else {\n      callback(false);\n    }\n  });\n});\n\n// Security: Protocol handler registration\napp.setAsDefaultProtocolClient('taskmaster');\n\n// Security: Handle protocol activation (Windows/Linux)\napp.on('second-instance', () => {\n  // Someone tried to run a second instance, focus our window instead\n  const windows = BrowserWindow.getAllWindows();\n  if (windows.length > 0) {\n    if (windows[0].isMinimized()) windows[0].restore();\n    windows[0].focus();\n  }\n});\n\n// Ensure single instance (temporarily disabled for debugging)\n// const gotTheLock = app.requestSingleInstanceLock();\n// if (!gotTheLock) {\n//   app.quit();\n// }\n\n// Export for testing purposes\nexport { createWindow };","usedDeprecatedRules":[]}]
