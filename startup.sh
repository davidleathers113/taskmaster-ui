#!/bin/bash
cd "$(dirname "$0")"
clear
echo "Starting Claude for ts-type-safety: TypeScript Type Safety Errors..."
claude $'Welcome to TaskMaster UI worktree for TypeScript Type Safety Errors!\n\n<task_context>\nTask: TypeScript Type Safety Errors (ts-type-safety)\nDescription: Fix TS7006 (implicit any), TS2532 (null/undefined), TS2345 (type assignment), TS2322 (type incompatibility) - 121+ errors\nBranch: fix/ts-type-safety\nPhase: 1\n</task_context>\n\n<project_context>\nThis is an Electron + React application using:\n- electron-vite for build system\n- TypeScript with strict mode\n- Zustand for state management\n- Tailwind CSS for styling\n- Vitest and Playwright for testing\n</project_context>\n\n<available_mcp_tools>\nYou have access to these MCP servers:\n\n1. **tree-sitter** - For code analysis and finding patterns\n   - Use: mcp__tree_sitter__find_text to locate code patterns\n   - Use: mcp__tree_sitter__get_symbols to extract symbols\n\n2. **taskmaster-ai** - For task tracking and progress\n   - Use: mcp__taskmaster-ai__get_task to check task details\n   - Use: mcp__taskmaster-ai__update_subtask to track progress\n\n3. **github** - For creating PRs and managing branches\n   - Use: mcp__github__create_pull_request when ready\n\n4. **sequential-thinking** - For planning complex fixes\n   - Use: When dealing with multiple related errors\n</available_mcp_tools>\n\n<error_context>\nTS7006 TS2532 TS2345 TS2322 \n</error_context>\n\n<instructions>\n1. Start by reading the TASK.md file to understand specific requirements\n2. Use `npm run typecheck` to see current TypeScript errors\n3. Use `npm run lint` to see ESLint problems\n4. Focus on the specific error types assigned to this worktree\n5. Commit frequently with conventional commit messages\n6. Update the progress tracking file after each batch of fixes\n7. Create a PR when the task is complete\n\nRemember: Quality over speed. Each fix should be verified to not introduce new errors.\n</instructions>'
